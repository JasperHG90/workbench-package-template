{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Workbench python template: a tagline that sounds hip and cool and convinces you This poetry template is primarily intended to be used with data/ml pipelines. Usage Please see the documentation for more detail on using py-pkgs-cookiecutter . We provide the fundamental steps below: Install cookiecutter : bash pip install cookiecutter Generate a Python package structure using py-pkgs-cookiecutter : bash cookiecutter https://github.com/py-pkgs/py-pkgs-cookiecutter.git After responding to the prompts you should have a directory structure similar to that shown below. To learn more about the contents of this directory structure, please see the py-pkgs-cookiecutter documentation . text pkg \u251c\u2500\u2500 .github \u2510 \u2502 \u2514\u2500\u2500 workflows \u2502 GitHub Actions workflow \u2502 \u2514\u2500\u2500 ci-cd.yml \u2518 \u251c\u2500\u2500 .gitignore \u2510 \u251c\u2500\u2500 .readthedocs.yml \u2502 \u251c\u2500\u2500 CHANGELOG.md \u2502 \u251c\u2500\u2500 CONDUCT.md \u2502 \u251c\u2500\u2500 CONTRIBUTING.md \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 make.bat \u2502 \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u251c\u2500\u2500 conduct.md \u2502 \u2502 \u251c\u2500\u2500 conf.py \u2502 Package documentation \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u2514\u2500\u2500 usage.ipynb \u2502 \u251c\u2500\u2500 LICENSE \u2502 \u251c\u2500\u2500 README.md \u2518 \u251c\u2500\u2500 pyproject.toml \u2510 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 pkg \u2502 Package source code, metadata, \u2502 \u251c\u2500\u2500 __init__.py \u2502 and build instructions \u2502 \u2514\u2500\u2500 pkg.py \u2518 \u2514\u2500\u2500 tests \u2510 \u2514\u2500\u2500 test_pkg.py \u2518 Package tests Contributing Interested in contributing? Check out the Contributing Guidelines . Please note that this project is released with a Code of Conduct . By contributing to this project, you agree to abide by its terms. License py-pkgs-cookiecutter was created by Tomas Beuzen and Tiffany Timbers. It is licensed under the terms of the BSD license. Acknowledgements py-pkgs-cookiecutter was originally developed for use in the University of British Columbia's (UBC) Master of Data Science _ program (MDS). It was inspired by the pyOpenSci cookiecutter template .","title":"Home"},{"location":"#workbench-python-template-a-tagline-that-sounds-hip-and-cool-and-convinces-you","text":"This poetry template is primarily intended to be used with data/ml pipelines.","title":"Workbench python template: a tagline that sounds hip and cool and convinces you"},{"location":"#usage","text":"Please see the documentation for more detail on using py-pkgs-cookiecutter . We provide the fundamental steps below: Install cookiecutter : bash pip install cookiecutter Generate a Python package structure using py-pkgs-cookiecutter : bash cookiecutter https://github.com/py-pkgs/py-pkgs-cookiecutter.git After responding to the prompts you should have a directory structure similar to that shown below. To learn more about the contents of this directory structure, please see the py-pkgs-cookiecutter documentation . text pkg \u251c\u2500\u2500 .github \u2510 \u2502 \u2514\u2500\u2500 workflows \u2502 GitHub Actions workflow \u2502 \u2514\u2500\u2500 ci-cd.yml \u2518 \u251c\u2500\u2500 .gitignore \u2510 \u251c\u2500\u2500 .readthedocs.yml \u2502 \u251c\u2500\u2500 CHANGELOG.md \u2502 \u251c\u2500\u2500 CONDUCT.md \u2502 \u251c\u2500\u2500 CONTRIBUTING.md \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 make.bat \u2502 \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u251c\u2500\u2500 conduct.md \u2502 \u2502 \u251c\u2500\u2500 conf.py \u2502 Package documentation \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u2514\u2500\u2500 usage.ipynb \u2502 \u251c\u2500\u2500 LICENSE \u2502 \u251c\u2500\u2500 README.md \u2518 \u251c\u2500\u2500 pyproject.toml \u2510 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 pkg \u2502 Package source code, metadata, \u2502 \u251c\u2500\u2500 __init__.py \u2502 and build instructions \u2502 \u2514\u2500\u2500 pkg.py \u2518 \u2514\u2500\u2500 tests \u2510 \u2514\u2500\u2500 test_pkg.py \u2518 Package tests","title":"Usage"},{"location":"#contributing","text":"Interested in contributing? Check out the Contributing Guidelines . Please note that this project is released with a Code of Conduct . By contributing to this project, you agree to abide by its terms.","title":"Contributing"},{"location":"#license","text":"py-pkgs-cookiecutter was created by Tomas Beuzen and Tiffany Timbers. It is licensed under the terms of the BSD license.","title":"License"},{"location":"#acknowledgements","text":"py-pkgs-cookiecutter was originally developed for use in the University of British Columbia's (UBC) Master of Data Science _ program (MDS). It was inspired by the pyOpenSci cookiecutter template .","title":"Acknowledgements"},{"location":"changelog/","text":"Changelog v0.2.0 (2023-03-16) Feature tasks: Add making docs task ( 658fd9d ) pyproject: Add semantic release info ( ea8add4 ) package: Update docs and add invoke as dependency ( 1f13302 ) pakcages: Add interrogate ( c83b270 ) Rewrites of workbench template based on existing projects ( 1abb1f6 ) Add skeleton CLI ( 809d5a4 ) Add CLI skeleton ( 2f9c211 ) Correct syntax on Python version 3.10 in CI ( 35f48dc ) Add Python 3.10 testing to CI ( 8e960a2 ) Check CC version before template generation ( 5eb3c1c ) Build deps: Add dependencies ( ce9dfde ) hooks: Add post hook ( 654347c ) noxfile: Add noxfile ( 55cbaf4 ) dependencies: Update dependencies ( 344f68a ) dependencies: Add pyinvoke ( 66566d4 ) cookiecutter: Add repository ( d3af7d7 ) source: Add mkdocs to package ( ca6af00 ) root: Update gitignore and remove sphinx files ( 3d18641 ) root: Add notebooks and secrets folders ( 8d5027e ) dependencies: Remove sphinx dependencies & add mkdocs dependencies ( 53728ad ) docs: Replace sphinx for mkdocs ( 6f9fda0 ) Fix pydantic yaml ( 9d3d452 ) Do not coociecutter parse GH actions yamls ( 5fd1439 ) Do not coociecutter parse GH actions yamls ( 49e25bc ) Do not coociecutter parse GH actions yamls ( 636b94e ) Remove pypi install ( c374d96 ) Add ignores ( f744c25 ) Remove pre-commit settings ( b8fafe5 ) Add entrypoint ( 87910ce ) Change script entrypoint name ( 2fb5dfe ) Add click as dependency ( 57402c7 ) Fix makefile ( e68111d ) Add some additional options ( 13d222a ) Add some additional options ( c6ebcbe ) Refactor Cookiecutter stuff ( e0dd8bb ) Use default GITHUB_TOKEN in PSR step ( f6fddb4 ) Remove skip_existing pypi-publish argument now that PSR default increments ( 7537c2f ) Upload_to_release in pyproject.toml ( b3c2afe ) Add poetry install step to CD and simplify PSR ( 413e9fa ) Add PSR toml config if user chooses ci+cd file ( 3c60018 ) Remove main condition on push/pr triggers ( 51919b4 ) Typo ( 636ac6f ) Remove termination on codecov fail ( 5674024 ) Workflow file formatting ( d590316 ) Complete refactor of cookiecutter mechanics and content \" ( 6997f0f ) Test cookiecutter: Ignore tests for now ( 756f133 ) Fix docs: Include readme ( eee987f ) cookiecutter: Fix initialization ( 1df44d0 ) Failing tests ( b45643f ) Remove hard-coded pycounts name in CI/CD files ( 44f6ba1 ) Documentation Add generated site and include to-dos ( f8071f9 ) todo: Add list of todos ( 41804c3 ) README: Remove cookiecutter stuff ( cb4c9f2 ) template: Insert readme into docs ( 6f4927c ) recipes: Add placeholders for recipes that shouldn't make it in the base version of the template ( 3d0423d ) Info about gh-pages hosting support ( e3338b4 ) Update readme and license ( aae15fc ) Add myst-parser as dependency ( 27eeef4 ) Fix RTD configuration ( edd9fa8 ) v0.3.0 (07/02/2022) \u2728 NEW Refactor workflow files (#42) Comments removed from steps and replaced with name keys Workflow triggered on push/pull to any branch CD job in the ci-cd.yaml workflow only triggers on push to main PSR re-configured to patch release by default and to always make a GH release \ud83d\udcda DOCS Add info about gh-pages hosting support (#40) \ud83d\udc1b FIX Remove hard-coded pycounts name in CI/CD files (#38) v0.2.1 (06/12/2021) \ud83d\udc1b FIX Removed hard-coded \"pycounts\" package name from CI/CD files. Renamed \"cd\" option to \"ci+cd\" v0.2.0 (06/09/2021) Breaking changes The new cookiecutter template has significantly changed since the last release. It has been modified to be in sync with and support the Python Packages book . v0.1.0 (16/08/2021) First release of py-pkgs-cookiecutter !","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v020-2023-03-16","text":"","title":"v0.2.0 (2023-03-16)"},{"location":"changelog/#feature","text":"tasks: Add making docs task ( 658fd9d ) pyproject: Add semantic release info ( ea8add4 ) package: Update docs and add invoke as dependency ( 1f13302 ) pakcages: Add interrogate ( c83b270 ) Rewrites of workbench template based on existing projects ( 1abb1f6 ) Add skeleton CLI ( 809d5a4 ) Add CLI skeleton ( 2f9c211 ) Correct syntax on Python version 3.10 in CI ( 35f48dc ) Add Python 3.10 testing to CI ( 8e960a2 ) Check CC version before template generation ( 5eb3c1c )","title":"Feature"},{"location":"changelog/#build","text":"deps: Add dependencies ( ce9dfde ) hooks: Add post hook ( 654347c ) noxfile: Add noxfile ( 55cbaf4 ) dependencies: Update dependencies ( 344f68a ) dependencies: Add pyinvoke ( 66566d4 ) cookiecutter: Add repository ( d3af7d7 ) source: Add mkdocs to package ( ca6af00 ) root: Update gitignore and remove sphinx files ( 3d18641 ) root: Add notebooks and secrets folders ( 8d5027e ) dependencies: Remove sphinx dependencies & add mkdocs dependencies ( 53728ad ) docs: Replace sphinx for mkdocs ( 6f9fda0 ) Fix pydantic yaml ( 9d3d452 ) Do not coociecutter parse GH actions yamls ( 5fd1439 ) Do not coociecutter parse GH actions yamls ( 49e25bc ) Do not coociecutter parse GH actions yamls ( 636b94e ) Remove pypi install ( c374d96 ) Add ignores ( f744c25 ) Remove pre-commit settings ( b8fafe5 ) Add entrypoint ( 87910ce ) Change script entrypoint name ( 2fb5dfe ) Add click as dependency ( 57402c7 ) Fix makefile ( e68111d ) Add some additional options ( 13d222a ) Add some additional options ( c6ebcbe )","title":"Build"},{"location":"changelog/#refactor","text":"Cookiecutter stuff ( e0dd8bb ) Use default GITHUB_TOKEN in PSR step ( f6fddb4 ) Remove skip_existing pypi-publish argument now that PSR default increments ( 7537c2f ) Upload_to_release in pyproject.toml ( b3c2afe ) Add poetry install step to CD and simplify PSR ( 413e9fa ) Add PSR toml config if user chooses ci+cd file ( 3c60018 ) Remove main condition on push/pr triggers ( 51919b4 ) Typo ( 636ac6f ) Remove termination on codecov fail ( 5674024 ) Workflow file formatting ( d590316 ) Complete refactor of cookiecutter mechanics and content \" ( 6997f0f )","title":"Refactor"},{"location":"changelog/#test","text":"cookiecutter: Ignore tests for now ( 756f133 )","title":"Test"},{"location":"changelog/#fix","text":"docs: Include readme ( eee987f ) cookiecutter: Fix initialization ( 1df44d0 ) Failing tests ( b45643f ) Remove hard-coded pycounts name in CI/CD files ( 44f6ba1 )","title":"Fix"},{"location":"changelog/#documentation","text":"Add generated site and include to-dos ( f8071f9 ) todo: Add list of todos ( 41804c3 ) README: Remove cookiecutter stuff ( cb4c9f2 ) template: Insert readme into docs ( 6f4927c ) recipes: Add placeholders for recipes that shouldn't make it in the base version of the template ( 3d0423d ) Info about gh-pages hosting support ( e3338b4 ) Update readme and license ( aae15fc ) Add myst-parser as dependency ( 27eeef4 ) Fix RTD configuration ( edd9fa8 )","title":"Documentation"},{"location":"changelog/#v030-07022022","text":"","title":"v0.3.0 (07/02/2022)"},{"location":"changelog/#new","text":"Refactor workflow files (#42) Comments removed from steps and replaced with name keys Workflow triggered on push/pull to any branch CD job in the ci-cd.yaml workflow only triggers on push to main PSR re-configured to patch release by default and to always make a GH release","title":"\u2728 NEW"},{"location":"changelog/#docs","text":"Add info about gh-pages hosting support (#40)","title":"\ud83d\udcda DOCS"},{"location":"changelog/#fix_1","text":"Remove hard-coded pycounts name in CI/CD files (#38)","title":"\ud83d\udc1b FIX"},{"location":"changelog/#v021-06122021","text":"","title":"v0.2.1 (06/12/2021)"},{"location":"changelog/#fix_2","text":"Removed hard-coded \"pycounts\" package name from CI/CD files. Renamed \"cd\" option to \"ci+cd\"","title":"\ud83d\udc1b FIX"},{"location":"changelog/#v020-06092021","text":"","title":"v0.2.0 (06/09/2021)"},{"location":"changelog/#breaking-changes","text":"The new cookiecutter template has significantly changed since the last release. It has been modified to be in sync with and support the Python Packages book .","title":"Breaking changes"},{"location":"changelog/#v010-16082021","text":"First release of py-pkgs-cookiecutter !","title":"v0.1.0 (16/08/2021)"},{"location":"conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant homepage , version 1.4.","title":"Conduct"},{"location":"conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant homepage , version 1.4.","title":"Attribution"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Types of Contributions Report Bugs Report bugs at https://github.com/py-pkgs/py-pkgs-cookiecutter/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation py-pkgs-cookiecutter could always use more documentation! Submit Feedback The best way to send feedback is to file an issue at https://github.com/py-pkgs/py-pkgs-cookiecutter/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up py-pkgs-cookiecutter for local development. Fork the py-pkgs-cookiecutter repo on GitHub. Clone your fork locally:: bash $ git clone git@github.com:your_name_here/py-pkgs-cookiecutter.git Create a branch for local development and make your changes locally:: bash $ git checkout -b name-of-your-bugfix-or-feature When you're done making changes, check that your changes conform to any code formatting requirements and pass any tests. Commit your changes and push your branch to GitHub:: bash $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request on GitHub. Code of Conduct Please note that this project is released with a Code of Conduct . By contributing to this project you agree to abide by its terms.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/py-pkgs/py-pkgs-cookiecutter/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"py-pkgs-cookiecutter could always use more documentation!","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/py-pkgs/py-pkgs-cookiecutter/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up py-pkgs-cookiecutter for local development. Fork the py-pkgs-cookiecutter repo on GitHub. Clone your fork locally:: bash $ git clone git@github.com:your_name_here/py-pkgs-cookiecutter.git Create a branch for local development and make your changes locally:: bash $ git checkout -b name-of-your-bugfix-or-feature When you're done making changes, check that your changes conform to any code formatting requirements and pass any tests. Commit your changes and push your branch to GitHub:: bash $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request on GitHub.","title":"Get Started!"},{"location":"contributing/#code-of-conduct","text":"Please note that this project is released with a Code of Conduct . By contributing to this project you agree to abide by its terms.","title":"Code of Conduct"},{"location":"todo/","text":"Tools ~~Ruff (linter) https://github.com/charliermarsh/ruff~~ Template Upgrade name of pipeline script Add generate /validate config to CLI Pygrep hooks https://github.com/pre-commit/pygrep-hooks Coverage Pyproject format Ruff Check pyproject settings for all tools Check all mkdocs extensions installed Pyproject config Add mkdocstrings https://mkdocstrings.github.io/usage/ In noxfile pytest: find way to only install main dependencies Adding e.g. interrogate report to PR as comment https://github.com/marketplace/actions/add-pr-comment Possibly: https://github.com/Erotemic/xdoctest https://github.com/asottile/pyupgrade https://github.com/pyupio/safety https://typeguard.readthedocs.io/en/latest/userguide.html https://github.com/release-drafter/release-drafter https://github.com/dependabot/dependabot-core Actions Nox action Python coverage https://github.com/marketplace/actions/python-coverage Github labeler https://github.com/marketplace/actions/github-labeler Cache poetry Inspiration https://github.com/fpgmaas/cookiecutter-poetry https://github.com/cjolowicz/cookiecutter-hypermodern-python","title":"Todo"},{"location":"todo/#tools","text":"~~Ruff (linter) https://github.com/charliermarsh/ruff~~","title":"Tools"},{"location":"todo/#template","text":"Upgrade name of pipeline script Add generate /validate config to CLI Pygrep hooks https://github.com/pre-commit/pygrep-hooks Coverage Pyproject format Ruff Check pyproject settings for all tools Check all mkdocs extensions installed Pyproject config Add mkdocstrings https://mkdocstrings.github.io/usage/ In noxfile pytest: find way to only install main dependencies Adding e.g. interrogate report to PR as comment https://github.com/marketplace/actions/add-pr-comment Possibly: https://github.com/Erotemic/xdoctest https://github.com/asottile/pyupgrade https://github.com/pyupio/safety https://typeguard.readthedocs.io/en/latest/userguide.html https://github.com/release-drafter/release-drafter https://github.com/dependabot/dependabot-core","title":"Template"},{"location":"todo/#actions","text":"Nox action Python coverage https://github.com/marketplace/actions/python-coverage Github labeler https://github.com/marketplace/actions/github-labeler Cache poetry","title":"Actions"},{"location":"todo/#inspiration","text":"https://github.com/fpgmaas/cookiecutter-poetry https://github.com/cjolowicz/cookiecutter-hypermodern-python","title":"Inspiration"},{"location":"recipes/authenticating-private-pypi-docker/","text":"","title":"Authenticating private pypi docker"},{"location":"recipes/authenticating-with-private-pypi/","text":"","title":"Authenticating with private pypi repositories"},{"location":"recipes/building-and-pushing-docker-containers/","text":"","title":"Building and pushing docker images to a private artifact store"},{"location":"recipes/orchestrating-flows-with-prefect2/","text":"","title":"Orchestrating flows with Prefect 2"}]}