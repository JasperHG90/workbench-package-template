[tool.poetry]
name = "{{ cookiecutter.__package_slug }}"
version = "{{ cookiecutter.package_version }}"
description = "{{ cookiecutter.package_short_description }}"
authors = ["{{ cookiecutter.author_name }}"]
license = "{{ cookiecutter.open_source_license }}"
readme = "README.md"
packages = [
  { include = "{{ cookiecutter.__package_slug }}", from = "src" }
]

[tool.poetry.scripts]
{{ cookiecutter.__package_slug }} = "{{ cookiecutter.__package_slug }}.cli:entrypoint"

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }},<3.11"
typer = "^0.6.1"
pydantic = "^1.10.6"
pydantic-yaml = {extras = ["pyyaml", "ruamel"], version = "^0.8.1"}

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.12.1"
tomli = "^2.0.1"
nox = "^2022.11.21"
nox-poetry = "^1.0.2"
python-dotenv = "^1.0.0"
invoke = "<2.0.0"
gitpython = "^3.1.31"
python-semantic-release = "^7.32.1"
ipykernel = "^6.15.1"
mypy = "^0.990"
isort = "^5.10.1"
black = "^22.10.0"
interrogate = "^1.5.0"
pyproject-fmt = "<0.9"
deptry = "^0.8.0"
bandit = "^1.7.5"
ruff = "^0.0.256"
pytest = ">6"
pytest-dotenv = "^0.5.2"
coverage = "^7.2.1"

# NB: this is not yet supported by nox-poetry
#  https://github.com/cjolowicz/nox-poetry/pull/1080
# [tool.poetry.group.static.dependencies]
# mypy = "^0.990"
# isort = "^5.10.1"
# black = "^22.10.0"
# interrogate = "^1.5.0"
# pyproject-fmt = "<0.9"
# deptry = "^0.8.0"
# bandit = "^1.7.5"
# ruff = "^0.0.256"

# [tool.poetry.group.test.dependencies]
# pytest = ">6"
# pytest-dotenv = "^0.5.2"
# coverage = "^7.2.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocstrings = {extras = ["python"], version = "^0.20.0"}
mkdocs-include-markdown-plugin = "^4.0.4"
mkdocs-jupyter = "^0.22.0"
mkdocs-material = "<9.0.0"

[tool.codespell]
skip = ".nox,.venv,.notebooks,.git,.secrets,docs,site,poetry.lock"
count = ''
quiet-level = 3

[tool.black]
line-length = 88
exclude = '''
^/(
  (
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.venv
    | _build
    | build
    | dist
    | .notebooks
    | .nox
  )
)
'''

[tool.isort]
profile = "black"
extend_skip = [".notebooks", ".nox", ".venv"]

[tool.mypy]
exclude = "^.notebooks/"
ignore_missing_imports = true

[tool.ruff]
ignore = ["E501"]
extend-exclude = [
  "__pycache__",
  "docs",
  "site",
  ".nox",
  ".notebooks"
]

[tool.semantic_release]
version_variable = [
  "pyproject.toml:version"
]
branch = "main"                             # branch to make releases of
changelog_file = "CHANGELOG.md"             # changelog file
build_command = "poetry build"              # build dists
dist_path = "dist/"                         # where to put dists
upload_to_release = true                    # auto-create GitHub release
upload_to_pypi = false                      # don't auto-upload to PyPI
remove_dist = false                         # don't remove dists
patch_without_tag = true                    # patch release by default
changelog_sections = "feature, build, refactor, style, test, fix, breaking, documentation, performance"
commit_message = "{version} [ci skip]"

[tool.deptry]
extend_exclude = ["docs", ".notebooks", "noxfile.py", "tasks.py"]
ignore_transitive = ["{{cookiecutter.__package_slug}}"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = true
fail-under = 10
exclude = [
  "setup.py", "docs", "build", "src/{{cookiecutter.__package_slug}}/cli.py", "src/{{cookiecutter.__package_slug}}/commands"
]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
#generate-badge = "."
#badge-format = "svg"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]
