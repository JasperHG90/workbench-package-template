[tool.poetry]
name = "{{ cookiecutter.__package_slug }}"
version = "{{ cookiecutter.package_version }}"
description = "{{ cookiecutter.package_short_description }}"
authors = ["{{ cookiecutter.author_name }}"]
license = "{{ cookiecutter.open_source_license }}"
readme = "README.md"

[tool.poetry.scripts]
pipeline = "{{ cookiecutter.__package_slug }}.cli:pipeline"

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
click = "^8.1.3"

[tool.poetry.dev-dependencies]
flake8 = "^3.9.2"
mypy = "^0.812"
pre-commit = "^2.12.1"
pytest = "^5.2"
pytest-cov = "^2.11.1"
pytest-dotenv = "^0.5.2"
isort = "^5.9.2"
python-semantic-release = "7.28.1"
black = "^22.3.0"
myst-nb = "^0.15.0"
sphinx-autoapi = "^1.8.4"
sphinx-rtd-theme = "^1.0.0"
ipykernel = "^6.15.1"

[tool.black]
line-length = 88
exclude = '''
^/(
  (
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.venv
    | _build
    | build
    | dist
    | notebooks
  )
)
'''

[tool.isort]
profile = "black"
extend_skip = ["notebooks"]

{% if cookiecutter.include_github_actions == 'ci+cd' -%}
[tool.semantic_release]
version_variable = [
  "pyproject.toml:version"
]
branch = "main"                             # branch to make releases of
changelog_file = "CHANGELOG.md"             # changelog file
build_command = "poetry build"              # build dists
dist_path = "dist/"                         # where to put dists
upload_to_release = true                    # auto-create GitHub release
upload_to_pypi = false                      # don't auto-upload to PyPI
remove_dist = false                         # don't remove dists
patch_without_tag = true                    # patch release by default
changelog_sections = "feature, build, refactor, style, test, fix, breaking, documentation, performance"
commit_message = "{version} [ci skip]"
{% endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
