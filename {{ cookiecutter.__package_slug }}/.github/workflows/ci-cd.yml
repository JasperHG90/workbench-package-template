name: ci-cd

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  static-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Install poetry
        uses: snok/install-poetry@v1
      - name: Set up Python {{cookiecutter.python_version}}
        uses: actions/setup-python@v4
        with:
          python-version: "{{cookiecutter.python_version}}"
      - name: Set up Nox
        uses: excitedleigh/setup-nox@v2.0.0
      - name: Set up Nox-poetry
        run: pip install "$(poetry export --without-hashes --with dev | grep nox-poetry)"
      - name: Run Nox
        run: nox
      - name: Upload coverage report
        if: {% raw %}${{ github.event_name == 'pull_request'}}{% endraw %}
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage.xml

  code-coverage-report:
    needs: static-checks
    if: {% raw %}${{ github.event_name == 'pull_request'}}{% endraw %}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Python {{cookiecutter.python_version}}
        uses: actions/setup-python@v4
        with:
          python-version: "{{cookiecutter.python_version}}"
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: code-coverage
          #path: coverage.xml
      - name: Report code coverage
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
  
  docstring-coverage-report:
    needs: static-checks
    if: {% raw %}${{ github.event_name == 'pull_request'}}{% endraw %}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Python {{cookiecutter.python_version}}
        uses: actions/setup-python@v4
        with:
          python-version: "{{cookiecutter.python_version}}"
      - name: Report docstring coverage
        uses: JasperHG90/toiminnot/docstring-coverage-report@36a879e2095cbc31ae4ac81d6afdc7eb7c0212b7
        with:
          path_to_src: 'src'
          github_repository: ${GITHUB_REPOSITORY}
          pr_number: {% raw %}${{ github.event.pull_request.number }}{% endraw %}
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

  bump-package-version:
    needs: static-checks
    if: {% raw %}${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')}}{% endraw %}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Install poetry
        uses: snok/install-poetry@v1
      - name: Set up Python {{cookiecutter.python_version}}
        uses: actions/setup-python@v4
        with:
          python-version: "{{cookiecutter.python_version}}"
      - name: Install python semantic release
        run: pip install "$(poetry export --without-hashes --with dev | grep python-semantic-release)"
      - name: Set git env variables
        run: |
          echo "GIT_COMMITTER_NAME=github-actions" >> $GITHUB_ENV
          echo "GIT_COMMITTER_EMAIL=github-actions@github.com" >> $GITHUB_ENV
      - name: Rebase on main
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: git merge origin/main
      - name: Pull changes from staging
        if: {% raw %}${{ github.ref == 'refs/heads/staging' }}{% endraw %}
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: git merge origin/staging
      - name: Bump version (stg)
        if: {% raw %}${{ github.ref == 'refs/heads/staging' }}{% endraw %}
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: semantic-release publish --no-prerelease-patch --prerelease -D branch="staging"
      - name: Bump version (prod)
        if: {% raw %}${{ github.ref == 'refs/heads/main' }}{% endraw %}
        env:
          GH_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        run: semantic-release publish

  deploy-docs:
    needs: bump-package-version
    if: {% raw %}${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}{% endraw %}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Install poetry
        uses: snok/install-poetry@v1
      - name: Set up Python {{cookiecutter.python_version}}
        uses: actions/setup-python@v4
        with:
          python-version: "{{cookiecutter.python_version}}"
      - name: Install dependencies
        run: poetry install --only=docs
      - name: Build docs
        run: poetry run mkdocs build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'site'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
